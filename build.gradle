plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.10"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

repositories {
    maven {
        name = 'papermc'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    mavenCentral() // Add Maven Central as a fallback repository
}

configurations {
    shadowImplementation {
        canBeResolved = true
        canBeConsumed = false
        extendsFrom configurations.implementation
    }
}

dependencies {
    compileOnly 'com.velocitypowered:velocity-api:3.4.0-SNAPSHOT'
    annotationProcessor 'com.velocitypowered:velocity-api:3.4.0-SNAPSHOT'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.12'
    implementation 'org.bstats:bstats-velocity:3.1.0'
}

shadowJar {
    relocate 'org.bstats', 'top.rathinosk.velocitywhitelist'
}

group = 'top.rathinosk'
version = '1.2.6'
description = 'Velocity plugin for managing a Minecraft whitelist using MySQL'

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'id'         : "velocitywhitelist",
            'name'       : project.name,
            'version'    : project.version,
            'link'       : "https://github.com/rathinosk/VelocityWhitelist",
            'description': project.description,
            'authors'    : "rathinosk",
            'buildDate'  : java.time.LocalDate.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd"))
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

idea.project.settings.taskTriggers.afterSync(generateTemplates)
tasks.named("eclipse") { it.dependsOn(generateTemplates) }
